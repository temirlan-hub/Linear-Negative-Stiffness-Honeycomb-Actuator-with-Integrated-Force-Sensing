#if defined(__linux__) || defined(__APPLE__)
#include <fcntl.h>
#include <termios.h>
#define STDIN_FILENO 0
#elif defined(_WIN32) || defined(_WIN64)
#include <stdio.h>
#include <NIDAQmx.h>
#include <conio.h>

#include <stdlib.h>
#include <iostream>
#include <chrono>
#include <ctime>   
#include <time.h>
#include <Windows.h>
#include "../include\dynamixel_sdk/dynamixel_sdk.h"                                  // Uses Dynamixel SDK library
#endif
#include <array>
using namespace std;
using namespace std::chrono;


//PID Variables
double kp = 20;
double ki = 0;
double kd = 0;
int timeCOunt = 0;
double elapsedTime;
double PIDerror;
double lastError;
double input, output, setPoint = 1;
double cumError, rateError;
auto previousTime = high_resolution_clock::now();;
auto currentTime = high_resolution_clock::now();;
double out = 0;

// Control table address
#define ADDR_PRO_TORQUE_ENABLE          64                 // Control table address is different in Dynamixel model
#define ADDR_PRO_GOAL_POSITION          116
#define ADDR_PRO_PRESENT_POSITION       132

// Protocol version
#define PROTOCOL_VERSION                2.0                 // See which protocol version is used in the Dynamixel

// Default setting
#define DXL_ID                          1                   // Dynamixel ID: 1
#define DXL_ID2                         2                   // Dynamixel ID: 1
#define BAUDRATE                        1000000
#define DEVICENAME                      "COM6" 
#define DEVICENAME2                      "COM5"// Check which port is being used on your controller
															// ex) Windows: "COM1"   Linux: "/dev/ttyUSB0" Mac: "/dev/tty.usbserial-*"

#define TORQUE_ENABLE                   1                   // Value for enabling the torque
#define TORQUE_DISABLE                  0                   // Value for disabling the torque
#define DXL_MINIMUM_POSITION_VALUE      0             // Dynamixel will rotate between this value
#define DXL_MAXIMUM_POSITION_VALUE     5000              // and this value (note that the Dynamixel would not move when the position value is out of movable range. Check e-manual about the range of the Dynamixel you use.)
#define DXL_MOVING_STATUS_THRESHOLD     1                  // Dynamixel moving status threshold

#define ESC_ASCII_VALUE                 0x1b



#define PI	3.1415926535

#define DAQmxErrChk(functionCall) if( DAQmxFailed(error=(functionCall)) ) goto Error; else

int getch()
{
#if defined(__linux__) || defined(__APPLE__)
	struct termios oldt, newt;
	int ch;
	tcgetattr(STDIN_FILENO, &oldt);
	newt = oldt;
	newt.c_lflag &= ~(ICANON | ECHO);
	tcsetattr(STDIN_FILENO, TCSANOW, &newt);
	ch = getchar();
	tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
	return ch;
#elif defined(_WIN32) || defined(_WIN64)
	return _getch();
#endif
}

int kbhit(void)
{
#if defined(__linux__) || defined(__APPLE__)
	struct termios oldt, newt;
	int ch;
	int oldf;

	tcgetattr(STDIN_FILENO, &oldt);
	newt = oldt;
	newt.c_lflag &= ~(ICANON | ECHO);
	tcsetattr(STDIN_FILENO, TCSANOW, &newt);
	oldf = fcntl(STDIN_FILENO, F_GETFL, 0);
	fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);

	ch = getchar();

	tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
	fcntl(STDIN_FILENO, F_SETFL, oldf);

	if (ch != EOF)
	{
		ungetc(ch, stdin);
		return 1;
	}

	return 0;
#elif defined(_WIN32) || defined(_WIN64)
	return _kbhit();
#endif
}


//PID FUNCTION
double computePID(float inp) {
	
	timeCOunt++;
	currentTime = high_resolution_clock::now();                //get current time in miliseconds
	float elapsedTime = std::chrono::duration<float>(currentTime - previousTime).count(); //CLOCKS_PER_SEC;        //compute time elapsed from previous computation

	PIDerror = setPoint - inp;
	printf("%f\t", elapsedTime);// determine error
	cumError = cumError + PIDerror;                // compute integral

	if (cumError > 5)
	{
		cumError = 5;
	}

	if (cumError < -5)
	{
		cumError = -5;
	}
	//cumError += PIDerror * elapsedTime;
	rateError = (PIDerror - lastError) / elapsedTime;   // compute derivative

	double integralPart = cumError * elapsedTime * ki;

	double PIDout = (kp * PIDerror + integralPart + kd * rateError) * (-1);                //PID output               
	out += PIDout;


	printf("%f\t", PIDerror);
	printf("%f\t", integralPart);
	lastError = PIDerror;                                //remember current error
	previousTime = currentTime;                        //remember current time
	printf("%f\t ", out);
	if (out > 3500) {
		out = 3500;
	}
	if (out < 0) {
		out = -0;
		lastError = 0;
	}

	return out;                                        //have function return the PID output
}

float sum_of_array(float array[])
{
	float sum = 0;
	for (int w = 0; w < 20; w++) {
		sum = sum + array[w];
	}
	return sum;
}
int main(void)
{

	// Initialize PortHandler instance
	// Set the port path
	// Get methods and members of PortHandlerLinux or PortHandlerWindows
	dynamixel::PortHandler* portHandler = dynamixel::PortHandler::getPortHandler(DEVICENAME);
	dynamixel::PortHandler* portHandler2 = dynamixel::PortHandler::getPortHandler(DEVICENAME2);
	// Initialize PacketHandler instance
	// Set the protocol version
	// Get methods and members of Protocol1PacketHandler or Protocol2PacketHandler
	dynamixel::PacketHandler* packetHandler = dynamixel::PacketHandler::getPacketHandler(PROTOCOL_VERSION);
	int index = 0;
	int dxl_comm_result = COMM_TX_FAIL;             // Communication result
	int dxl_goal_position[2] = { DXL_MINIMUM_POSITION_VALUE, DXL_MAXIMUM_POSITION_VALUE };         // Goal position

	uint8_t dxl_error = 0;                          // Dynamixel error
	int32_t dxl_present_position = 0;               // Present position
	int16_t dxl_present_current = 0;
	int position1 = 0;
	int position2 = 0;
	int position;
	int i = 0;
	// Open port
	if (portHandler->openPort())
	{
		printf("Succeeded to open the port!\n");
	}
	else
	{
		printf("Failed to open the port!\n");
		printf("Press any key to terminate...\n");
		getch();
		return 0;
	}

	// Set port baudrate
	if (portHandler->setBaudRate(BAUDRATE))
	{
		printf("Succeeded to change the baudrate!\n");
	}
	else
	{
		printf("Failed to change the baudrate!\n");
		printf("Press any key to terminate...\n");
		getch();
		return 0;
	}

	// Enable Dynamixel Torque
	dxl_comm_result = packetHandler->write1ByteTxRx(portHandler, DXL_ID, ADDR_PRO_TORQUE_ENABLE, TORQUE_ENABLE, &dxl_error);
	if (dxl_comm_result != COMM_SUCCESS)
	{
		// printf("%s\n", packetHandler->getTxRxResult(dxl_comm_result));
		printf("%s\n", packetHandler->getTxRxResult(dxl_comm_result));
	}
	else if (dxl_error != 0)
	{
		// printf("%s\n", packetHandler->getRxPacketError(dxl_error));
		printf("%s\n", packetHandler->getRxPacketError(dxl_error));
	}
	else
	{
		printf("Dynamixel has been successfully connected \n");
	}


	// Open port2
	if (portHandler2->openPort())
	{
		printf("Succeeded to open the port!\n");
	}
	else
	{
		printf("Failed to open the port!\n");
		printf("Press any key to terminate...\n");
		getch();
		return 0;
	}

	// Set port baudrate
	if (portHandler2->setBaudRate(BAUDRATE))
	{
		printf("Succeeded to change the baudrate!\n");
	}
	else
	{
		printf("Failed to change the baudrate!\n");
		printf("Press any key to terminate...\n");
		getch();
		return 0;
	}

	// Enable Dynamixel Torque
	dxl_comm_result = packetHandler->write1ByteTxRx(portHandler2, DXL_ID2, ADDR_PRO_TORQUE_ENABLE, TORQUE_ENABLE, &dxl_error);
	if (dxl_comm_result != COMM_SUCCESS)
	{
		// printf("%s\n", packetHandler->getTxRxResult(dxl_comm_result));
		printf("%s\n", packetHandler->getTxRxResult(dxl_comm_result));
	}
	else if (dxl_error != 0)
	{
		// printf("%s\n", packetHandler->getRxPacketError(dxl_error));
		printf("%s\n", packetHandler->getRxPacketError(dxl_error));
	}
	else
	{
		printf("Dynamixel has been successfully connected \n");
	}


	int t = 0;
	int k = 0;

	int32 error = 0;
	TaskHandle taskHandle = 0;
	TaskHandle taskHandle2 = 0;
	TaskHandle taskHandle3 = 0;
	int32 read;
	float64 data[1000];
	float64 linear[1000];
	char errBuff[2048] = { '\0' };
	for (int i = 0; i < 1000; i++)
		linear[i] = 2 * sin((double)i * 2.0 * PI / 1000.0) + 2;

	int prosto = 0;
	/*DAQmxErrChk(DAQmxCreateTask("", &taskHandle2));
	DAQmxErrChk(DAQmxCreateAOVoltageChan(taskHandle2, "Dev1/ao0", "", -10.0, 10.0, DAQmx_Val_Volts, NULL));
	DAQmxErrChk(DAQmxCfgSampClkTiming(taskHandle2, "", 1000.0, DAQmx_Val_Rising, DAQmx_Val_ContSamps, 1000));
	DAQmxErrChk(DAQmxWriteAnalogF64(taskHandle2, 1000, 0, 10.0, DAQmx_Val_GroupByChannel, linear, NULL, NULL));

	DAQmxErrChk(DAQmxStartTask(taskHandle2));*/


	dxl_comm_result = packetHandler->write4ByteTxRx(portHandler, DXL_ID, ADDR_PRO_GOAL_POSITION, 2100, &dxl_error);

	dxl_comm_result = packetHandler->write4ByteTxRx(portHandler2, DXL_ID2, ADDR_PRO_GOAL_POSITION, 1200, &dxl_error);

	float force = 0;
	float forceArray[20];
	std::fill_n(forceArray, 20, 0);

	float64 five[1000];
	std::fill_n(five, 1000, 2);
	float64 zero[1000];
	std::fill_n(zero, 1000, 0);

	DAQmxErrChk(DAQmxCreateTask("", &taskHandle3));
	DAQmxErrChk(DAQmxCreateAOVoltageChan(taskHandle3, "Dev1/ao0", "", -10.0, 10.0, DAQmx_Val_Volts, NULL));
	DAQmxErrChk(DAQmxCfgSampClkTiming(taskHandle3, "", 1000, DAQmx_Val_Rising, DAQmx_Val_ContSamps, 1000));
	DAQmxErrChk(DAQmxStartTask(taskHandle3));
	DAQmxErrChk(DAQmxWriteAnalogF64(taskHandle3, 1000, 0, 10.0, DAQmx_Val_GroupByChannel, zero, NULL, NULL));
	DAQmxStopTask(taskHandle3);

	DAQmxErrChk(DAQmxCreateTask("", &taskHandle));
	DAQmxErrChk(DAQmxCreateAIVoltageChan(taskHandle, "Dev1/ai0", "", DAQmx_Val_Cfg_Default, -10.0, 10.0, DAQmx_Val_Volts, NULL));
	DAQmxErrChk(DAQmxCfgSampClkTiming(taskHandle, "", 1000, DAQmx_Val_Rising, DAQmx_Val_ContSamps, 2));
	DAQmxErrChk(DAQmxStartTask(taskHandle));


	Sleep(2000);
	

	while (1 == 1) {
		auto loopTime = high_resolution_clock::now();

		dxl_comm_result = packetHandler->read4ByteTxRx(portHandler, DXL_ID, ADDR_PRO_PRESENT_POSITION, (uint32_t*)&dxl_present_position, &dxl_error);
		dxl_comm_result = packetHandler->read2ByteTxRx(portHandler, DXL_ID, 126, (uint16_t*)&dxl_present_current, &dxl_error);
		DAQmxErrChk(DAQmxReadAnalogF64(taskHandle, -1, 10.0, DAQmx_Val_GroupByChannel, data, 1000, &read, NULL));

		k = i;
		t = i + 1;
		if (i > 19) {
			k = i % 20;
			t = 20;
		}

		forceArray[k] = ((data[0]-2.475-0.035)*3.84516);
		force = sum_of_array(forceArray) / t;



		position = computePID(force);

		prosto = prosto + 1;
		printf("%i \t", prosto);

		printf("%f \n", force);


		if (dxl_present_position > position1 - 20) {

			position1 = 2100 + position;
			position2 = 1200 - position;

		}



		dxl_comm_result = packetHandler->write4ByteTxRx(portHandler2, DXL_ID2, ADDR_PRO_GOAL_POSITION, position2, &dxl_error);

		dxl_comm_result = packetHandler->write4ByteTxRx(portHandler, DXL_ID, ADDR_PRO_GOAL_POSITION, position1, &dxl_error);


		/*DAQmxErrChk(DAQmxStartTask(taskHandle3));
		DAQmxErrChk(DAQmxWriteAnalogF64(taskHandle3, 1000, 0, 10.0, DAQmx_Val_GroupByChannel, zero, NULL, NULL));
		DAQmxStopTask(taskHandle3);*/
	}


	// Disable Dynamixel Torque
	dxl_comm_result = packetHandler->write1ByteTxRx(portHandler, DXL_ID, ADDR_PRO_TORQUE_ENABLE, TORQUE_DISABLE, &dxl_error);
	if (dxl_comm_result != COMM_SUCCESS)
	{
		printf("%s\n", packetHandler->getTxRxResult(dxl_comm_result));
	}
	else if (dxl_error != 0)
	{
		printf("%s\n", packetHandler->getRxPacketError(dxl_error));
	}

	// Close port
	portHandler->closePort();

	// Disable Dynamixel Torque
	dxl_comm_result = packetHandler->write1ByteTxRx(portHandler2, DXL_ID2, ADDR_PRO_TORQUE_ENABLE, TORQUE_DISABLE, &dxl_error);
	if (dxl_comm_result != COMM_SUCCESS)
	{
		printf("%s\n", packetHandler->getTxRxResult(dxl_comm_result));
	}
	else if (dxl_error != 0)
	{
		printf("%s\n", packetHandler->getRxPacketError(dxl_error));
	}

	// Close port
	portHandler2->closePort();

Error:
	if (DAQmxFailed(error))
		DAQmxGetExtendedErrorInfo(errBuff, 2048);
	if (taskHandle != 0)
	{
		/*********************************************/
		// DAQmx Stop Code
		/*********************************************/
		DAQmxStopTask(taskHandle);
		DAQmxClearTask(taskHandle);
	}
	if (DAQmxFailed(error))
		printf("DAQmx Error: %s\n", errBuff);
	printf("End of program, press Enter key to quit\n");
	getchar();
	return 0;
}


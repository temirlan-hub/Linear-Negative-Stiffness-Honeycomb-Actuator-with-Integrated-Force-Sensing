#if defined(__linux__) || defined(__APPLE__)
#include <fcntl.h>
#include <termios.h>
#define STDIN_FILENO 0
#elif defined(_WIN32) || defined(_WIN64)
#include <stdio.h>
#include <NIDAQmx.h>
#include <conio.h>
#include<stdio.h>
#include <stdlib.h>
#include <iostream>
#include <chrono>
#include <ctime>   
#include <time.h>
#include <Windows.h>
#include "../include\dynamixel_sdk/dynamixel_sdk.h"                                  // Uses Dynamixel SDK library
#endif
#include <array>
using namespace std;

//PID Variables
double kp = 20;
double ki = 20;
double kd = 15;
int timeCOunt = 0;
double elapsedTime;
double PIDerror;
double lastError;
double input, output, setPoint=1;
double cumError, rateError;
clock_t previousTime;
clock_t currentTime;
double out = 0;

#define PI	3.1415926535

#define DAQmxErrChk(functionCall) if( DAQmxFailed(error=(functionCall)) ) goto Error; else

int getch()
{
#if defined(__linux__) || defined(__APPLE__)
	struct termios oldt, newt;
	int ch;
	tcgetattr(STDIN_FILENO, &oldt);
	newt = oldt;
	newt.c_lflag &= ~(ICANON | ECHO);
	tcsetattr(STDIN_FILENO, TCSANOW, &newt);
	ch = getchar();
	tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
	return ch;
#elif defined(_WIN32) || defined(_WIN64)
	return _getch();
#endif
}

int kbhit(void)
{
#if defined(__linux__) || defined(__APPLE__)
	struct termios oldt, newt;
	int ch;
	int oldf;

	tcgetattr(STDIN_FILENO, &oldt);
	newt = oldt;
	newt.c_lflag &= ~(ICANON | ECHO);
	tcsetattr(STDIN_FILENO, TCSANOW, &newt);
	oldf = fcntl(STDIN_FILENO, F_GETFL, 0);
	fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);

	ch = getchar();

	tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
	fcntl(STDIN_FILENO, F_SETFL, oldf);

	if (ch != EOF)
	{
		ungetc(ch, stdin);
		return 1;
	}

	return 0;
#elif defined(_WIN32) || defined(_WIN64)
	return _kbhit();
#endif
}

int main(void)
{

	int32 error = 0;
	TaskHandle taskHandle = 0;
	TaskHandle taskHandle2 = 0;
	TaskHandle taskHandle3 = 0;
	int32 read;
	float64 data[1000];
	float64 linear[1000];
	float k = 2.3;
	int j = 0;
	float plot[106][6] = {0};

	char errBuff[2048] = { '\0' };
	for (int i = 0; i < 1000; i++)
		linear[i] = 2 * sin((double)i * 2.0 * PI / 1000.0) + 2;

	/*DAQmxErrChk(DAQmxCreateTask("", &taskHandle2));
	DAQmxErrChk(DAQmxCreateAOVoltageChan(taskHandle2, "Dev1/ao0", "", -10.0, 10.0, DAQmx_Val_Volts, NULL));
	DAQmxErrChk(DAQmxCfgSampClkTiming(taskHandle2, "", 1000.0, DAQmx_Val_Rising, DAQmx_Val_ContSamps, 1000));
	DAQmxErrChk(DAQmxWriteAnalogF64(taskHandle2, 1000, 0, 10.0, DAQmx_Val_GroupByChannel, linear, NULL, NULL));

	DAQmxErrChk(DAQmxStartTask(taskHandle2));*/


	DAQmxErrChk(DAQmxCreateTask("", &taskHandle));
	DAQmxErrChk(DAQmxCreateAIVoltageChan(taskHandle, "Dev1/ai0", "", DAQmx_Val_Cfg_Default, -10.0, 10.0, DAQmx_Val_Volts, NULL));
	DAQmxErrChk(DAQmxCreateAIVoltageChan(taskHandle, "Dev1/ai1", "", DAQmx_Val_Cfg_Default, -10.0, 10.0, DAQmx_Val_Volts, NULL));
	DAQmxErrChk(DAQmxCreateAIVoltageChan(taskHandle, "Dev1/ai2", "", DAQmx_Val_Cfg_Default, -10.0, 10.0, DAQmx_Val_Volts, NULL));
	DAQmxErrChk(DAQmxCreateAIVoltageChan(taskHandle, "Dev1/ai3", "", DAQmx_Val_Cfg_Default, -10.0, 10.0, DAQmx_Val_Volts, NULL));
	DAQmxErrChk(DAQmxCreateAIVoltageChan(taskHandle, "Dev1/ai4", "", DAQmx_Val_Cfg_Default, -10.0, 10.0, DAQmx_Val_Volts, NULL));
	DAQmxErrChk(DAQmxCreateAIVoltageChan(taskHandle, "Dev1/ai5", "", DAQmx_Val_Cfg_Default, -10.0, 10.0, DAQmx_Val_Volts, NULL));
	DAQmxErrChk(DAQmxCfgSampClkTiming(taskHandle, "", 1000, DAQmx_Val_Rising, DAQmx_Val_FiniteSamps, 150));

	float64 pos[1000];
	
	FILE *fp;
	
	DAQmxErrChk(DAQmxCreateTask("", &taskHandle3));
	DAQmxErrChk(DAQmxCreateAOVoltageChan(taskHandle3, "Dev1/ao0", "", -10.0, 10.0, DAQmx_Val_Volts, NULL));
	DAQmxErrChk(DAQmxCfgSampClkTiming(taskHandle3, "", 100000, DAQmx_Val_Rising, DAQmx_Val_ContSamps, 1000));	

	while (1 == 1) {
		k = k + 2.032/200;

		if (k > 3.5){
			Sleep(3000);
			for (int i = 0; i <= sizeof(plot)/sizeof(plot[0]); i++) {
				printf("%f \t", plot[i][0]);
				printf("%f \t", plot[i][1]);
				printf("%f \t", plot[i][2]);
				printf("%f \t", plot[i][3]);
				printf("%f \t", plot[i][4]);
				printf("%f \n", plot[i][5]);
			}
			std::fill_n(pos, 1000, 1);
			DAQmxErrChk(DAQmxStartTask(taskHandle3));
			DAQmxErrChk(DAQmxWriteAnalogF64(taskHandle3, 1000, 0, 10.0, DAQmx_Val_GroupByChannel, pos, NULL, NULL));
			DAQmxStopTask(taskHandle3);

			FILE* f = fopen("Experiment1.csv", "w+");

			for (int i = 0; i <= sizeof(plot) / sizeof(plot[0]); i++) {
				for (int y = 0; y < 5; y++) {
					fprintf(f, "%f, \t", plot[i][y]);
				}
				fprintf(f, "%f \n", plot[i][5]);
			}
			fclose(f);

			return 0;
		}

		std::fill_n(pos, 1000, k);

		DAQmxErrChk(DAQmxStartTask(taskHandle3));
		DAQmxErrChk(DAQmxWriteAnalogF64(taskHandle3, 1000, 0, 10.0, DAQmx_Val_GroupByChannel, pos, NULL, NULL));
		
		Sleep(3000);

		DAQmxErrChk(DAQmxStartTask(taskHandle));
		DAQmxErrChk(DAQmxReadAnalogF64(taskHandle, 150, 10, DAQmx_Val_GroupByChannel, data, 1000, &read, NULL));

	
		DAQmxStopTask(taskHandle);
		
		float sum = 0;
		for (int i = 0; i < 150; i++) {
			sum = data[i] + sum;
		}
		float force = (sum / 150 - 2.475 - 0.035) * 3.84516;
		
		sum = 0;
		for (int i = 150; i < 300; i++) {
			sum = data[i] + sum;
		}
		float feedback = (sum/150)*2.032;

		sum = 0;
		for (int i = 300; i < 450; i++) {
			sum = data[i] + sum;
		}
		float sensor1 = (sum / 150);

		sum = 0;
		for (int i = 450; i < 600; i++) {
			sum = data[i] + sum;
		}
		float sensor2 = (sum / 150);


		sum = 0;
		for (int i = 600; i < 750; i++) {
			sum = data[i] + sum;
		}
		float sensor3 = (sum / 150);


		sum = 0;
		for (int i = 750; i < 900; i++) {
			sum = data[i] + sum;	
		}
		
		float sensor4 = (sum / 150);


		printf("%f \t", force);
		printf("%f \t", feedback);
		printf("%f \t", sensor1);
		printf("%f \t", sensor2);
		printf("%f \t", sensor3);
		printf("%f \n", sensor4);
		
		plot[j][0] = force*10;
		plot[j][1] = feedback*10;
		plot[j][2] = sensor1;
		plot[j][3] = sensor2;
		plot[j][4] = sensor3;
		plot[j][5] = sensor4;
		
		DAQmxStopTask(taskHandle3);
		j = j + 1;
		
	}
	
	

Error:
	if (DAQmxFailed(error))
		DAQmxGetExtendedErrorInfo(errBuff, 2048);
	if (taskHandle != 0)
	{
		/*********************************************/
		// DAQmx Stop Code
		/*********************************************/
		DAQmxStopTask(taskHandle);
		DAQmxClearTask(taskHandle);
	}
	if (DAQmxFailed(error))
		printf("DAQmx Error: %s\n", errBuff);
	printf("End of program, press Enter key to quit\n");
	getchar();
	
	
}

